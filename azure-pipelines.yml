# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

variables:
  swigVersion: '4.0.0'
  compilerInitialization: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
  packagesFolder: $(System.DefaultWorkingDirectory)/packages
  artifactsName: packages

stages:
- stage: Build
  displayName: Build stage

  jobs:
# Linux  ######################################################################################################################
  - job: Linux
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Installs build/run dependencies
    - bash: |
       wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
       sudo dpkg -i packages-microsoft-prod.deb
       sudo apt-get update -qq 
       sudo apt-get -yqq install apt-transport-https dpkg dotnet-sdk-2.2
       sudo apt-get -yqq install autoconf libtool zlib1g-dev gawk curl lsb-release
       sudo apt-get -yqq install bison 
       cd /tmp/ && wget https://github.com/swig/swig/archive/rel-$(swigVersion).tar.gz && tar zxf rel-$(swigVersion).tar.gz && cd swig-rel-$(swigVersion) && ./autogen.sh && ./configure --prefix "${HOME}"/swig/ 1>/dev/null && make >/dev/null && make install >/dev/null
      displayName: Install dependencies

    - bash: |    
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        make detect
        make third_party
      displayName: Build third_party
    
    - bash: |
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        make dotnet
      displayName: Build all languages    
       
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)
# OSX  ######################################################################################################################
  - job: macOS
    pool:
      vmImage: 'macOS-latest'
    steps:
    # Installs build/run dependencies
    - bash: |
       brew update
       brew install swig@$(swigVersion)
       # see https://github.com/travis-ci/travis-ci/issues/10275
       brew install gcc || brew link --overwrite gcc
       brew install make ccache 
       brew upgrade python
       python3 -m pip install -q virtualenv wheel six
       brew tap caskroom/cask
       brew cask install dotnet-sdk
      displayName: Install dependencies

    - bash: |    
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        make detect
        make third_party
      displayName: Build third_party
    
    - bash: |
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        make dotnet
      displayName: Build all languages    

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)    
# Windows  ######################################################################################################################
  - job: WindowsBuild
    displayName: Windows
    pool:
      vmImage: 'windows-2019'
      
    steps:
    
    # Installs build/run dependencies
    # Sh problem: sh must not be in path, see Makefile.win.mk
    - script: |
        echo 'Remove sh.exe from path'
        del "C:\Program Files\Git\usr\bin\sh.exe"
        del "C:\Program Files\Git\bin\sh.exe"
        where sh
        echo '-----------------------'
        
        cinst swig --version $(swigVersion) --no-progress
        cinst dotnetcore-sdk --no-progress
    
        clist -lo
      displayName: Install dependencies
    
    # builds third party libraries
    # Git problem: when using "C:\agents\2.155.1\externals\git\cmd\git.exe" we get problems during abseil-cpp checkout => "git: 'remote-https' is not a git command.""
    - script: |
        set PATH=C:\Program Files\Git\cmd;%PATH%
        echo %PATH%
        git --info-path
        where git
    
        $(compilerInitialization)
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        tools\make.exe detect
        tools\make third_party
      displayName: Build third_party
    
    - script: |
        $(compilerInitialization)
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        tools\make dotnet
      displayName: Build all languages
    
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)