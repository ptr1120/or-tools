# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

variables:
  swigVersion: '4.0.1'
  compilerInitialization: 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
  swigInstallation: cd /tmp/ && wget https://github.com/swig/swig/archive/rel-$(swigVersion).tar.gz && tar zxf rel-$(swigVersion).tar.gz && cd swig-rel-$(swigVersion) && ./autogen.sh && ./configure --prefix "${HOME}"/swig/ 1>/dev/null && make >/dev/null && make install >/dev/null
  packagesFolder: $(System.DefaultWorkingDirectory)/packages
  artifactsName: packages
  linuxImage: 'ubuntu-16.04'
  osxImage: 'macOS-10.14'
  windowsImage: 'windows-2019'

stages:
- stage: Build
  displayName: Build stage

  jobs:
# Linux  ######################################################################################################################
  - job: linux
    pool:
      vmImage: $(linuxImage)
    steps:
    # Installs build/run dependencies
    - script: |
       sudo apt-get update -qq 
       sudo apt-get -yqq install autoconf libtool zlib1g-dev gawk curl lsb-release
       sudo apt-get -yqq install bison 
       $(swigInstallation)
       
       dotnet --info
       python -V
       java -version
      displayName: Install dependencies

    - script: |    
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        export PATH="${HOME}"/swig/bin:"${PATH}"
        swig -version
        
        make detect
        make third_party
      displayName: Build third_party
    
    - script: |
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        export PATH="${HOME}"/swig/bin:"${PATH}"
        
        ./tools/release/build_delivery_unix.sh
      displayName: Build all languages    
       
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)-$(linuxImage)
# OSX  ######################################################################################################################
  - job: macOS
    pool:
      vmImage: $(osxImage)
    steps:

    # todo unify swig install
    # Installs build/run dependencies
    - script: |
       brew update     
       brew install cmake wget pkg-config
       # see https://github.com/travis-ci/travis-ci/issues/10275
       brew install gcc || brew link --overwrite gcc
       brew install make ccache 
       brew upgrade python
       python3 -m pip install -q virtualenv wheel six
       brew tap caskroom/cask

       brew install automake pcre
       $(swigInstallation)

       dotnet --info
       python -V
       java -version
      displayName: Install dependencies

    - script: |    
        export PATH="${HOME}"/swig/bin:"${PATH}"
        swig -version
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        
        make detect
        make third_party
      displayName: Build third_party
    
    - script: |
        export PATH="${HOME}"/swig/bin:"${PATH}"
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        
        make cc
        make dotnet
        make python
        make java
      displayName: Build all languages    

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)-$(osxImage)    
# Windows  ######################################################################################################################
  - job: windowsBuild
    displayName: Windows
    dependsOn:
     - linux
     - macOS
    pool:
      vmImage: $(windowsImage)
      
    steps:

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build linux Artifacts'
      inputs:
        buildType: 'current'
        artifactName: '$(artifactsName)-$(linuxImage)'
        targetPath: '$(packagesFolder)'
        patterns: '**/*.linux-x64.*'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build osx Artifacts'
      inputs:
        buildType: 'current'
        artifactName: '$(artifactsName)-$(osxImage)'
        targetPath: '$(packagesFolder)'
        patterns: '**/*.osx-x64.*'

    # Sh problem: sh must not be in path, see Makefile.win.mk
    - script: |
        dir
        dir packages
        echo 'Remove sh.exe from path'
        del "C:\Program Files\Git\usr\bin\sh.exe"
        del "C:\Program Files\Git\bin\sh.exe"
        where sh
        echo '-----------------------'
        
        dotnet --info
        python -V
        java -version

        cinst wget --no-progress
        cinst python --no-progress
        cinst openjdk --no-progress

        cd %TEMP% && wget https://netix.dl.sourceforge.net/project/swig/swigwin/swigwin-$(swigVersion)/swigwin-$(swigVersion).zip && jar xf swigwin-$(swigVersion).zip && cp swigwin-$(swigVersion)\swig.exe C:\ProgramData\chocolatey\bin\

        dotnet --info
        python -V
        java -version  
        clist -lo
      displayName: Install dependencies
    
    # builds third party libraries
    # Git problem: when using "C:\agents\2.155.1\externals\git\cmd\git.exe" we get problems during abseil-cpp checkout => "git: 'remote-https' is not a git command.""
    - script: |
        set PATH=C:\Program Files\Git\cmd;%PATH%
        git --info-path
        swig -version
    
        $(compilerInitialization)
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        
        tools\make.exe detect
        tools\make third_party
      displayName: Build third_party
    
    - script: |
        $(compilerInitialization)
        set CMAKE_BUILD_PARALLEL_LEVEL=4
        
        tools\make cc
        tools\make dotnet
        tools\make python
        tools\make java
      displayName: Build all languages
    
    - task: PublishPipelineArtifact@1
      inputs:
        path: $(packagesFolder)
        artifact: $(artifactsName)-$(windowsImage)


# Test Matrix  ######################################################################################################################
  - job: test
    displayName: Test
    dependsOn:
     - windowsBuild
    strategy:
      matrix:
        linux:
          # todo variables can not be used in strategy https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#expansion-of-variables
          imageName: 'ubuntu-16.04'
          makeCmd: make
        mac:
          imageName: 'macOS-10.14'
          makeCmd: make
        windows:
          imageName: 'windows-2019'
          makeCmd: tools\make.exe

    pool:
      vmImage: '$(imageName)'
      
    steps:
      
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build multi platform artifacts'
      inputs:
        buildType: 'current'
        artifactName: '$(artifactsName)-$(windowsImage)'
        targetPath: '$(packagesFolder)'

# todo       $(makeCmd) test_cc
    - script: |
        dir packages
        
        $(makeCmd) test_dotnet
        $(makeCmd) test_java
        $(makeCmd) test_python
      displayName: Test